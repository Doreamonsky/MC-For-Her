using System.Collections;
using UnityEngine;

namespace MC.Core
{
    public class DynamicBirthDayBlock : MonoBehaviour
    {
        //琲
        private readonly int[,] Bei = new int[,]
{
           {2,2,2,2,2,0,0,0,0,2,0,0,2,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,2,2,2,1,0,0,1,2,2,2, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,2,0,0,0,0,1,0,0,1,0,0,0, },
           {0,2,2,2,0,0,2,2,2,1,0,0,1,2,2,2, },
           {2,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0, },
           {0,0,1,0,0,0,2,2,2,1,0,0,1,2,2,2, },
           {0,0,1,0,2,0,0,0,0,1,0,0,1,0,0,0, },
           {0,2,1,2,0,0,0,0,0,1,0,0,1,0,0,0, },
           {2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0, },
};

        private readonly int[,] Xiao = new int[,]
        {
           {0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,2,0,0,1,0,0,2,0,0,0,0, },
           {0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0, },
           {0,0,0,2,0,0,0,0,1,0,0,0,0,2,0,0, },
           {0,0,2,0,0,0,0,0,1,0,0,0,0,0,2,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0, },
        };
        private readonly int[,] Yang = new int[,]
        {
           {0,0,0,2,0,0,2,2,2,2,2,2,2,2,2,2, },
           {0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0, },
           {0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0, },
           {0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0, },
           {2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2, },
           {0,0,1,1,1,0,0,0,0,0,1,0,0,2,0,1, },
           {0,2,0,1,0,2,0,0,0,0,1,0,0,1,0,1, },
           {2,0,0,1,0,0,2,0,0,2,0,0,2,0,0,1, },
           {0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1, },
           {0,0,0,1,0,0,0,0,2,0,0,2,0,0,0,1, },
           {0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1, },
           {0,0,0,1,0,0,0,2,0,0,2,0,0,0,0,1, },
           {0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1, },
           {0,0,0,1,0,0,2,0,0,2,0,0,1,0,0,1, },
           {0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1, },
           {0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2, },
        };

        //生
        private readonly int[,] Shen = new int[,]
        {
           {0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0, },
           {0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,1,2,2,2,2,2,2,2,2,0,0,0, },
           {0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0, },
           {0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0, },
        };

        //快
        private readonly int[,] Kuai = new int[,]
        {
           {0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0, },
           {0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0, },
           {0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0, },
           {0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0, },
           {0,0,0,1,0,2,0,2,2,2,2,2,2,2,0,0, },
           {0,2,0,1,0,1,0,0,0,1,0,0,0,2,0,0, },
           {0,1,0,1,0,0,2,0,0,1,0,0,0,2,0,0, },
           {2,0,0,1,0,0,0,0,0,1,0,0,0,2,0,0, },
           {1,0,0,1,0,2,2,2,2,2,2,2,2,2,2,2, },
           {0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0, },
           {0,0,0,1,0,0,0,0,2,0,2,0,0,0,0,0, },
           {0,0,0,1,0,0,0,0,1,0,0,2,0,0,0,0, },
           {0,0,0,1,0,0,0,1,0,0,0,0,2,0,0,0, },
           {0,0,0,1,0,0,2,0,0,0,0,0,0,2,0,0, },
           {0,0,0,1,0,0,1,0,0,0,0,0,0,0,2,0, },
           {0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2, },
        };

        private WorldManager worldManager;

        private IEnumerator AddXZArrayToMap(int[,] anyArray, int arrayX, int arrayY, int x, int y, int height)
        {
            for (var i = 0; i < arrayX; i++)
            {
                for (var j = 0; j < arrayY; j++)
                {
                    if (anyArray[arrayX - i - 1, j] != 0)
                    {
                        worldManager.CreateBlock(height + i, x + j, y, anyArray[arrayX - i - 1, j]);
                    }
                    yield return new WaitForFixedUpdate();
                    yield return new WaitForFixedUpdate();
                }
                yield return new WaitForFixedUpdate();

            }
        }

        private void Start()
        {
            worldManager = GameObject.FindObjectOfType<WorldManager>();

            StartCoroutine(AddXZArrayToMap(Bei, 16, 16, 2, 58 + 32, 24));
            StartCoroutine(AddXZArrayToMap(Bei, 16, 16, 16, 62 + 32, 24));
            StartCoroutine(AddXZArrayToMap(Shen, 16, 16, 34, 58 + 32, 24));
            StartCoroutine(AddXZArrayToMap(Kuai, 16, 16, 50, 62 + 32, 24));
        }
    }
}
